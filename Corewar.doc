#COREWAR#




.s		assembleur
.cor	bytecode


#ENCODAGE#


	1 - Le code de l'instruction. (on le trouve dans op_tab dans op.c)
		{"live", 1, {T_DIR}, 1, 10, "alive", 0, 0},

		T_DIR = 2 mais c est quoi bordel ?



	functions :

		sti : r1, r2, r3// r2 + r3 = r4    r4 = r1


#CHAMPION#

 Le champion le plus simple "The Imp".

 	mov 0,1;

L'instruction mov se copie elle meme dans l'espace suivant.

- Si dans le code du player on demande un acces a un registre inexistant l instruction ne semble pas fonctionner
- Le premier registre == r1

#ENCODAGE#

Chaque instruction est encode par

1 - le code de l instruction (je suppose que c est l opcode) on le trouve dans op.c mais aussi
	dans le pdf directement...
2 - L octet de codage des parametres si besoin (comment savoir si il y a besoin ou pas j en sais rien poour le moment)
	L octet de codage sert a definir la maniere dont sont dispose les parametres

	r2,23,%34 donne l’octet de codage 0b01111000, soit 0x78
	23,45,%34 donne l’octet de codage 0b11111000, soit 0xF8
	r1,r3,34 donne l’octet de codage 0b01011100, soit 0x5C

	un registre == 01;
	un nombre indirect == 11;
	un nombre direct avec % == 1 ou 10 ?

3 - Les paramètres, directement, selon le modèle suivant :
	r2,23,%34 donne l’OCP 0x78 puis 0x02 0x00 0x17 0x00 0x00 0x00 0x22
	23,45,%34 donne l’OCP 0xF8 puis 0x00 0x17 0x00 0x2d 0x00 0x00 0x00
0x22

	r2: 0x02							//registre
	23: 0x00, 0x17						//valeur indirect
	%34: 0x00, 0x00, 0x00, 0x22			//valeur directe


	23: 0x00, 0x17
	45: 0x00, 0x2d
	%34: 0x00, 0x00, 0x00, 0x22

- Un %x nombre direct sur 2 octets, des short donc...
- Un nombre indirect est aussi sur 2 octets en fait tous les nombres sont sur 2 octets

- loadtime sur les fonctions

Important : Si une instruction est appellée avec un registre inexistant,
l'instruction est invalide et le processus appelant crash.
